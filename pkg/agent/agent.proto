// SPDX-License-Identifier: Apache-2.0 OR GPL-2.0-or-later
syntax = "proto3";

package agent;

option go_package = "github.com/swinslow/peridot-jobrunner/pkg/agent";

import "pkg/status/status.proto";

// Agent defines the GRPC interface provided by an Agent that can talk
// to a peridot controller.
service Agent {
    // NewJob is the only RPC endpoint that an Agent provides. It
    // is a bidirectional streaming RPC that enables the Controller to
    // send messages to the Agent, and vice versa. It will remain open
    // during the lifetime of a given Job and its early termination
    // means that the Job should be treated as failed.
    rpc NewJob(stream ControllerMsg) returns (stream AgentMsg) {}
}

// ControllerMsg can consist of one of the available types of
// messages from the main controller to the Agent.
message ControllerMsg {
    oneof cm {
        StartReq start = 1;
        StatusReq status = 2;
    }
}

// AgentMsg can consist of one of the available types of messages from the
// Agent to the main controller.
message AgentMsg {
    oneof am {
        StatusReport status = 2;
    }
}

// JobConfig defines the configuration for a job.
// Relevance of configuration details will depend upon the Agent's
// capabilities.
message JobConfig {
    // codereader: code paths under analysis
    message CodeInput {
        // short description of this code input.
        // "primary" means that it is the primary code under analysis;
        // most codereader agents will expect a "primary" input.
        // otherwise, may be e.g. agent name for the upstream agent that
        // retrieved and placed the code in place.
        // if the Agent is also an spdxreader, then the CodeInput could
        // have a corresponding SpdxInput describing it in further detail.
        string source = 1;

        // path to directory or file to be analyzed
        string path = 2;
    }
    repeated CodeInput codeInputs = 1;

    // codewriter: directory where code can be written
    string codeOutputDir = 2;

    // spdxreader: paths to multiple earlier SPDX files which may be reused
    message SpdxInput {
        // short description for source of SPDX file; may be e.g. agent name,
        // "former" for former known good SPDX files; etc.
        // don't try to include too much detail here; the agent can read the
        // SPDX file and get more data if it wants to. this is just meant to
        // give enough info to the agent to decide whether it potentially
        // cares about the file at all.
        string source = 1;

        // path to SPDX file (or directory containing them) for this source
        string path = 2;
    }
    repeated SpdxInput spdxInputs = 3;

    // spdxwriter: directory path to write one or more output SPDX files
    string spdxOutputDir = 4;

    // job-specific key-value pairs; will vary by agent
    message JobKV {
        string key = 1;
        string value = 2;
    }
    repeated JobKV jkvs = 5;
}

// StartReq requests that a Job be started on this Agent. An Agent should
// respond to this (eventually) by sending a StatusReport.
message StartReq {
    // configuration for this job
    JobConfig config = 1;
}

// StatusReq requests that the Agent send a status update message
// about the Job for this connection.
message StatusReq {}

// ===== Reports (from Agent to Controller) =====

// StatusReport provides information about the Job for this connection.
// It should be issued promptly following receipt of a StartReq, StatusReq
// or CancelReq, and may be issued periodically otherwise at the Agent's
// discretion.
message StatusReport {
    // is the job running?
    status.Status runStatus = 1;

    // is the job healthy?
    status.Health healthStatus = 2;

    // time when the job was started, as Unix time
    int64 timeStarted = 3;

    // time when the job stopped running, as Unix time
    int64 timeFinished = 4;

    // logged output, if any. should be short messages; anything
    // lengthy should be separately logged or reported elsewhere
    string outputMessages = 5;
}
